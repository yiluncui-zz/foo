<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.amazonaws</groupId>
    <artifactId>aws-java-sdk</artifactId>
    <packaging>jar</packaging>
    <name>AWS SDK for Java</name>
    <version>1.0.004</version>
    <description>The Amazon Web Services SDK for Java provides Java APIs for building software on AWSâ€™ cost-effective, scalable, and reliable infrastructure products. The AWS Java SDK allows developers to code against APIs for all of Amazon's infrastructure web services (Amazon S3, Amazon EC2, Amazon SQS, Amazon Relational Database Service, Amazon AutoScaling, etc).</description>
    <url>http://aws.amazon.com/sdkforjava</url>

    <scm>
        <url>http://github.com/amazonwebservices/aws-sdk-for-java.git</url>
    </scm>

    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <url>http://aws.amazon.com/apache2.0</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <dependencies>
        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
            <version>[1.0, 2.0)</version>
        </dependency>
        <dependency>
            <groupId>commons-httpclient</groupId>
            <artifactId>commons-httpclient</artifactId>
            <version>[3.0, 4.0)</version>
        </dependency>
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>1.3</version>
        </dependency>
        <dependency>
            <groupId>org.codehaus.jackson</groupId>
            <artifactId>jackson-core-asl</artifactId>
            <version>[1.4, 1.5)</version>
            <type>jar</type>
            <scope>compile</scope>
        </dependency>
        <!-- SaxonHE isn't required for the AWS SDK for Java to run, but
             it provides a *much* more performant JAXP implementation and
             the AWS SDK for Java will run much better with it.  AWS strongly
             recommends using SaxonHE with the AWS SDK for Java.

             Unfortunately SaxonHE 9 isn't available through the Maven central
             repo, but you can easily download it and manually install it into
             your local m2 repo:
                 mvn install:install-file -Dfile=saxon9he.jar -DgroupId=net.sf.saxon \
                     -DartifactId=saxon9he -Dversion=9.0.2j -Dpackaging=jar

             For more information on installing third party jars locally:
             http://maven.apache.org/guides/mini/guide-3rd-party-jars-local.html  -->
        <dependency>
            <groupId>net.sf.saxon</groupId>
            <artifactId>saxon9he</artifactId>
            <version>[9.0.0, 10.0.0)</version>
            <optional>true</optional>
        </dependency>
    </dependencies>

    <developers>
        <developer>
            <id>amazonwebservices</id>
            <organization>Amazon Web Services</organization>
            <organizationUrl>http://aws.amazon.com</organizationUrl>
            <roles>
                <role>developer</role>
            </roles>
        </developer>
    </developers>

    <build>
      <pluginManagement>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
              <source>1.5</source>
              <target>1.5</target>
              <encoding>UTF-8</encoding>
            </configuration>
          </plugin>
        </plugins>
      </pluginManagement>

      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-gpg-plugin</artifactId>
          <executions>
            <execution>
              <id>sign-artifacts</id>
              <phase>verify</phase>
              <goals>
                <goal>sign</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </build>

</project>
